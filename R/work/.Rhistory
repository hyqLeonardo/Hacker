get.variables(lprec)
get.constraints(lprec)
?get.objective
?solve
?solve.lpExtPtr
?get.objective
lps.model <- make.lp(0, 3)
xt <- c(6,2,4)
add.constraint(lps.model, xt, "<=", 150)
xt <- c(1,1,6)
add.constraint(lps.model, xt, ">=", 0)
xt <- c(4,5,4)
add.constraint(lps.model, xt, "=", 40)
lps.model
set.objfn(lps.model, c(-3, -4, -3))
lps.model
solve(lps.model)
get.objective(lps.model)
get.variables(lps.model)
install.packages("pracma")
library(pracma)
names()
name()
list()
?rref
A = matrix(c(-25, 125, 5, 95), ncol = 2, nrow = 2)
A
?transpose
A''
A'
)
''
t(A)
A = t(A)
A
?colbind
cbind(A, c(11, 9.5))
B = cbind(A, c(11, 9.5))
B
rref(B)
result <- rref(B)
result[2, 3] - result[1, 3]
A <- matrix(c(-3, 130, 12, 10, 90, 10), byrow = TRUE)
A
A <- matrix(c(-3, 130, 12, 10, 90, 10), nrow = 2, ncol = 3, byrow = TRUE)
A
rref(A)
A[1, 1]  = -30
A
rref(A)
search()
library(xlsx)
search()
make.power <- function(n) {
pw <- function(x) {
x^n
}
pow
}
first <- make.power(2)
make.power <- function(n) {
pow <- function(x) {
x^n
}
pow
}
first <- make.power(2)
first
first(3)
ls(environment(cube))
cube <- make.power(3)
square <- make.ppower(2)
square <- make.power(2)
ls(environment(cube))
ls(environment(cube))
ls(environment(cube(2)))
get("n", environment(cube))
get("n", environment(square))
y <- 10
f <- function(x) {
y <- 2
}
f <- funciton(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f <- function(x) {
y <- 2
y^2 + g(x)
}
f(3)
?nlm
f <- function(x) sum((x-1:length(x))^2)
nlm(f, c(10, 10))
make.NegLogLik <- function(data, fixed=c(FALSE, FALSE)) {
params <- fixed
function(p) {
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum((data-mu)^2) / (sigma^2)
-(a + b)
}
}
fix <- c(FALSE, FALSE)
params <- fixed
params <- fix
params[!fix] <- 5
params
!fix
params <- 4
params
mu <- params[1]
mu
sigma <- params[2]
sigma
params
set.seed(1);
normals <- rnorm(100,1, 2)
normals
summary(normals)
var(normals)
sd(normals)
nLL <- make.NegLogLik(normals)
nLL
ls(environment(nLL))
optim(c(mu = 0, sigma = 1), nLL)$par
?optim
a <- c(FALSE, 2)
a[!c]
a[!a]
a
a[!a] <- 1
a
nLL_2 <- make.NegLogLik(normals, c(FALSE, 2))
nLL_2
ls(environment(nLL_2))
optimize(nLL_2, c(-1, 3))$minimum
nLL_3 <- make.NegLogLik(normals, c(1, FALSE))
opitimize(nLL_3, c(1e-6, 10))$minimum
optimize(nLL_3, c(1e-6, 10))$minimum
nLL <- make.NegLogLik(normals, c(1, FALSE))
x <- seq(1.7, 1.9, len = 100)
x
y <- sapply(x, nLL)
y
nLL
plot(x, exp(-(y - min(y))), type = "1")
plot(x, exp(-(y - min(y))), type = "l")
nLL <- make.NegLogLik(normals, c(FALSE, 2))
x <- seq(0.5, 1.5, len = 100)
y <- sapply(x, nLL)
plot(x, exp(-y-min(y)), type = "l")
plot(x, exp(-y-min(y)))
plot(x, exp(-y-min(y)), type = "l")
library(xlsx)
library(xlsx)
load("E:/Leo_works/Introductory Econometrics/R/charity.RData")
mls <- lm(gift ~ mailsyear + giftlast + propresp, data)
ols <- lm(gift ~ mailsyear)
ols <- lm(gift ~ mailsyear, data)
desc
summary(ols)
summary(mls)
mls_2 <- mls(gift ~ mailsyear + giftlast + propresp + avggift, data)
mls_2 <- lm(gift ~ mailsyear + giftlast + propresp + avggift, data)
summary(mls_2)
cor(data$avggift, data$mailsyear)
desc
cor(data$avggift, data$giftlast)
load("E:/Leo_works/Introductory Econometrics/R/htv.RData")
summary(data$educ)
twelve <- data[which(data$educ == 12), ]
desc
length(twelve) / length(data)
dim(data)
dim(twelve)[1]/dim(data)[1]
mean(data$educ)
mean(mean(data$fatheduc), mean(data$motheduc))
mls <- lm(educ ~ motheduc + fatheduc, data)
summary(mls)
mls_3 <- lm(educ ~ motheduc + fatheduc + abil, data)
summary(mls_3)
summary(data$abil)
mls_4 <- lm(educ ~ motheduc + fatheduc + abil + abil^2, data)
coe <- mls_4coefficients
coe <- mls_4$coefficients
coe
coe[3]/(2*coe[4])
value <- -coe[3]/(2*coe[4])
value
less <- data[which(data$abil <= value), ]
dim(less)[1]/dim(data)[1]
education <- function(x) {
y <- coe[1]+coe[2]*12.18+coe[3]*12.45+coe[4]*x+coe[5]*x^2
}
coe
summary(mls4)
summary(mls_4)
mls_4 <- lm(educ ~ motheduc + fatheduc + abil + abil^2, data)
summary(mls_4)
head(data$abil^2)
mls_4 <- lm(educ ~ motheduc + fatheduc + abil + I(abil^2), data)
summary(mls_4)
coe <- mls_4$coefficients
coe
education <- function(x) {
y <- coe[1]+coe[2]*12.18+coe[3]*12.45+coe[4]*x+coe[5]*x^2
}
y <- education(data$abil)
head(y)
plot(x, y)
x <- data$abil
plot(x, y)
plot(x, y, 'l')
scat(x, y, 'l')
plot((x, y), 'l')
plot(x, y, type = "l")
plot(y, x, type = "l")
plot(x, y)
value
value <- -coe[4]/(2*coe[5])
value
coe
coe[4]
demo()
demo(Hershey)
demo(Japanese)
demo(image)
demo(graphics)
View(a)
rm(all)
?rm
remove()
demo(plotmath)
demo(persp)
demo(graphics)
demo(colors)
demo(hclColors)
demos(glm.vr)
demos(nlm)
demo(glm.vr)
demo(nlm)
demo(smooth)
demo(package = .packages(all.available = TRUE))
demo(pracma)
demo(tkcanvas)
vignette()
vignette(svmdoc)
vignette("svmdoc")
vignette("xlsx")
data()
library(lpSolveAPI)
vignettes(0)
vignettes()
vignette()
vignette("development")
vignette("release")
dim1 <- c("A1", "A2")
dim2 <- c("B1", "B2", "B3")
dim3 <- c("C1", "C2", "C3", "C4")
dim3
z <- array(1:24, c(2, 3, 4), dimnames = list(dim1, dim2, dim3))
z
z(2, 3, 3)
z[2, 3, 3]
?table
attach(mtcars)
summary(mpg)
plot(mpg, disp)
plot(mpg, wt)
detach(mtcars)
mpg <- c(25, 36, 47)
attach(mtcars)
plot(mpg, wt)
mpg
environment(mtcars$mpg)
environment(mpg)
?environment
?env
environment(mena)
environment(mean)
with(mtcars, {
stats <- summary(mpg)
})
stats
with(mtcars, {
stats <- summary(mpg)
stats
})
with(mtcars, {
nokeepstats <- summary(mpg)
keepstats <<- summary(mpg)
})
keepstats
diabetes <- c("Type1", "Type2", "Type1", "Type1")
diabetes
factor(diabetes)
patientID <- c(1, 2, 3, 4)
age <- c(25, 34, 28, 52)
status <- c("Poor", "Improved", "Excellent", "Poor")
patientdata <- data.frame(patientID, age, diabetes, status)
patientdata
diabetes <- factor(diabetes)
diabetes
status <- factor(status, ordered = TRUE)
status
status <- factor(status, ordered = TRUE, levels = c("Poor", "Improved", "Excellent")
)
status
patientID
age
status <- factor(status, order = TURE
)
status <- factor(status, order = TRUE)
status
patientdata <- data.frame(patientID, age, diabetes, status)
patientdata
str(patientdata)
summary(patientdata)
q()
mtcars
attach(mtcars)
ols <- lm(mpg ~ wt)
osl
ols
str(ols)
ols[[1]]
names(ols[[1]])
unname(ols[[1]])
if (FALSE) {}
if (FALSE) {
a = 1
}
a
mydata <- data.frame(age=numeric(0), gender=character(0),weight=numeric(0))
mydata
numeric(0)
mydata <- edit(mydata)
mydata
str(mydata)
setwd(E:/Leo_works/Programming/R)
setwd("E:/Leo_works/Programming/R")
getwd()
camera <- read.table("camera.csv", header=TRUE, sep=",", rownames = "address")
camera <- read.table("camera.csv", header=TRUE, sep=",", row.names = "address")
camera <- read.table("camera.csv", header=TRUE, sep=",", row.names = "Location 1")
camera <- read.table("camera.csv", header=TRUE, sep=",")
camera
str(camera)
camera <- read.table("camera.csv", header=TRUE, sep=",", row.names = "Location.1")
camera <- read.table("camera.csv", header=TRUE, sep=",", stringsAsFactors = FALSE)
str(camera)
install.packages("RODBC")
a <- 1
a
Portfolio <- function(directory, stock_name, t = 120) {
setwd(directory)
if (!file.exists("portfolio")) {
dir.create("portfolio")
}
num <- length(stock_name)
URL <- "http://real-chart.finance.yahoo.com/table.csv?s=STOCK&a=00&b=1&c=2004&d=00&e=1&f=2014&g=m&ignore=.csv"
file_name <- character()
stock <- matrix(ncol = num, nrow = t, byrow = FALSE)
stock_r <- matrix(ncol = num, nrow = t, byrow = FALSE)
Covar <- matrix(nrow = num, ncol = num)
Exp_return <- numeric()
Risk <- numeric()
for(i in 1:num) {
url <- gsub("STOCK", stock_name[i], URL)
file_name[i] <- paste("./portfolio/", stock_name[i], ".csv", sep = "")
download.file(url, destfile = file_name[i])
colIndex <- 7
#stock_raw <- read.csv(file_name[i], colClasses = c(rep("NULL", 6), NA))
stock_raw <- read.csv(file_name[i], colIndex = colIndex)
stock[, i] <- unname(unlist(stock_raw))
for (j in 1:(t-1)) {   # Be careful ! A "()" is needed after "1:", or "-1" will also minus 1
stock_r[j, i] <- (stock[j, i]-stock[j+1, i])/(stock[j+1, i]) # from the 1 of "1:"
}
stock_r <- stock_r[1:(t-1), ]
Exp_return[i] <- mean(stock_r[, i])
Risk[i] <- sd(stock_r[, i])
}
for (i in 1:num) {
for (j in 1:num) {
Covar[i, j] <- cov(stock_r[, i], stock_r[, j])
}
}
# Another way of computing Covariance Matrix using Principal Componet Analysis !
# stock_m <- t(stock_r)
# r <- dim(stock_m)[1]
# c <- dim(stock_m)[2]
# m <- rowMeans(stock_m)
# M <- matrix(rep(m, c), nrow = r, byrow = F)
# X <- stock_m - M
# S <- 1/(c-1) * as.matrix(X) %*% t(X)
Covar <- Covar
}
directory <- "C:/Users/Leonardo/Desktop/Portfolio"
stock_name <- c("AAPL", "WMT", "MMM", "YUM", "JPM", "AMZN")
Covar <- Portfolio(directory, stock_name)
getwd()
directory <- "C:/Users/Leonardo/Desktop/Portfolio"
setwd(directory)
getwd()
setwd(directory)
Portfolio <- function(directory, stock_name, t = 120) {
setwd(directory)
if (!file.exists("portfolio")) {
dir.create("portfolio")
}
num <- length(stock_name)
URL <- "http://real-chart.finance.yahoo.com/table.csv?s=STOCK&a=00&b=1&c=2004&d=00&e=1&f=2014&g=m&ignore=.csv"
file_name <- character()
stock <- matrix(ncol = num, nrow = t, byrow = FALSE)
stock_r <- matrix(ncol = num, nrow = t, byrow = FALSE)
Covar <- matrix(nrow = num, ncol = num)
Exp_return <- numeric()
Risk <- numeric()
for(i in 1:num) {
url <- gsub("STOCK", stock_name[i], URL)
file_name[i] <- paste("./portfolio/", stock_name[i], ".csv", sep = "")
download.file(url, destfile = file_name[i])
colIndex <- 7
#stock_raw <- read.csv(file_name[i], colClasses = c(rep("NULL", 6), NA))
stock_raw <- read.csv(file_name[i], colIndex = colIndex)
stock[, i] <- unname(unlist(stock_raw))
for (j in 1:(t-1)) {   # Be careful ! A "()" is needed after "1:", or "-1" will also minus 1
stock_r[j, i] <- (stock[j, i]-stock[j+1, i])/(stock[j+1, i]) # from the 1 of "1:"
}
stock_r <- stock_r[1:(t-1), ]
Exp_return[i] <- mean(stock_r[, i])
Risk[i] <- sd(stock_r[, i])
}
for (i in 1:num) {
for (j in 1:num) {
Covar[i, j] <- cov(stock_r[, i], stock_r[, j])
}
}
# Another way of computing Covariance Matrix using Principal Componet Analysis !
# stock_m <- t(stock_r)
# r <- dim(stock_m)[1]
# c <- dim(stock_m)[2]
# m <- rowMeans(stock_m)
# M <- matrix(rep(m, c), nrow = r, byrow = F)
# X <- stock_m - M
# S <- 1/(c-1) * as.matrix(X) %*% t(X)
Covar <- Covar
}
directory <- "E:/Leo_works/Portfolio"
stock_name <- c("AAPL", "WMT", "MMM", "YUM", "JPM", "AMZN")
Covar <- Portfolio(directory, stock_name)
Portfolio <- function(directory, stock_name, t = 120) {
setwd(directory)
if (!file.exists("portfolio")) {
dir.create("portfolio")
}
num <- length(stock_name)
URL <- "http://real-chart.finance.yahoo.com/table.csv?s=STOCK&a=00&b=1&c=2004&d=00&e=1&f=2014&g=m&ignore=.csv"
file_name <- character()
stock <- matrix(ncol = num, nrow = t, byrow = FALSE)
stock_r <- matrix(ncol = num, nrow = t, byrow = FALSE)
Covar <- matrix(nrow = num, ncol = num)
Exp_return <- numeric()
Risk <- numeric()
for(i in 1:num) {
url <- gsub("STOCK", stock_name[i], URL)
file_name[i] <- paste("./portfolio/", stock_name[i], ".csv", sep = "")
download.file(url, destfile = file_name[i])
colIndex <- 6:7
#stock_raw <- read.csv(file_name[i], colClasses = c(rep("NULL", 6), NA))
stock_raw <- read.csv(file_name[i], colIndex = colIndex)
stock[, i] <- unname(unlist(stock_raw))
for (j in 1:(t-1)) {   # Be careful ! A "()" is needed after "1:", or "-1" will also minus 1
stock_r[j, i] <- (stock[j, i]-stock[j+1, i])/(stock[j+1, i]) # from the 1 of "1:"
}
stock_r <- stock_r[1:(t-1), ]
Exp_return[i] <- mean(stock_r[, i])
Risk[i] <- sd(stock_r[, i])
}
for (i in 1:num) {
for (j in 1:num) {
Covar[i, j] <- cov(stock_r[, i], stock_r[, j])
}
}
# Another way of computing Covariance Matrix using Principal Componet Analysis !
# stock_m <- t(stock_r)
# r <- dim(stock_m)[1]
# c <- dim(stock_m)[2]
# m <- rowMeans(stock_m)
# M <- matrix(rep(m, c), nrow = r, byrow = F)
# X <- stock_m - M
# S <- 1/(c-1) * as.matrix(X) %*% t(X)
Covar <- Covar
}
directory <- "E:/Leo_works/Portfolio"
stock_name <- c("AAPL", "WMT", "MMM", "YUM", "JPM", "AMZN")
Covar <- Portfolio(directory, stock_name)
setwd("E:/Leo_works/Programming/R")
camera <- read.csv("camera.csv")
dim(camera)
cam <- read.csv("camera.csv", nrows = 30)
dim(cam)
head(cam)
head(camera)
vignette
vignette()
